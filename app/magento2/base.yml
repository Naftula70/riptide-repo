app:
  name: magento2
  import:
    media_files:
      target: "{{ services.www.working_directory }}/pub/media"
      name: Media Files
  notices:
    usage: >-
      After this setup, run the following commands to finish up:

        # 1. Install Composer modules
        cd <project>/{{ parent().src }}/{{ services.www.working_directory }}
        riptide cmd composer install --ignore-platform-reqs

        # 2. Start the database and redis
        riptide start -s redis,db

        # 3. Run setup:upgrade
        riptide cmd magento setup:upgrade

      Riptide set's only the default store's Base URLs (to http://{{ services.varnish.domain() }}).

      After that your Magento shop will be ready! Enjoy!

    installation: >-
      To install Magento run the following commands on the command line:

        # 0. Download the Magento source code (replace with 'enterprise-edition' if you want):
        mkdir -p <project_directory_root>/src
        cd <project_directory_root>/{{ parent().src }}
        riptide cmd composer create-project --repository=https://repo.magento.com/ --ignore-platform-reqs magento/project-community-edition ./{{ services.www.working_directory }}

        # 1. Dump the autoloader
        cd ./{{ services.www.working_directory }}
        riptide cmd composer dump-autoload

        # 2. Start the database and redis
        riptide start -s redis,db

        # 3. Install Magento using the CLI.
        riptide cmd magento setup:install \
          --base-url=https://{{ services.varnish.domain() }}/ \
          --db-host=db \
          --db-name={{ services.db.driver.config.database }} \
          --db-user=root  \
          --db-password={{ services.db.driver.config.password }} \
          --admin-firstname=Admin \
          --admin-lastname=Admin \
          --admin-email=email@yourcompany.com \
          --admin-user=admin \
          --admin-password=admin123 \
          --language=en_US \
          --currency=USD \
          --timezone=America/Chicago \
          --use-rewrites=1

        # 3. (Optional) install sample data
        riptide cmd magento sampledata:deploy

        # 4. Run setup:upgrade
        riptide restart -s redis
        riptide cmd magento setup:upgrade

      You can change the settings in step 3 to your likings, see the installation guide at
        https://devdocs.magento.com/guides/v2.3/install-gde/install/cli/install-cli.html
  services:
    php:
      $ref: /service/php/7.2/fpm
      roles:
        - src
        - php
      logging:
        stdout: true
        stderr: true
      config:
        env_php:
          from: assets/env.php
          to: '{{ get_working_directory() }}/app/etc/env.php'
      post_start:
        # Wait for db
        - 'until bin/magento; do :; done'
        # Set basic database settings
        - "bin/magento config:set --scope=default web/unsecure/base_url https://{{ parent().services.varnish.domain() }}/'"
        - "bin/magento config:set --scope=default web/secure/base_url https://{{ parent().services.varnish.domain() }}/'"
        - "bin/magento config:set --scope=default web/secure/offloader_header X-Forwarded-Proto"
        # Flush cache
        - "bin/magento cache:flush"

    www:
      $ref: /service/nginx/latest
      roles:
        - src
        - varnish
      image: nginx
      logging:
        stdout: true
        stderr: true
      config:
        env_php:
          from: assets/env.php
          to: '{{ get_working_directory() }}/app/etc/env.php'
        magento_nginx_conf:
          from: assets/magento-nginx.conf
          to: '/etc/nginx/conf.d/default.conf'
      pre_start:
        # Wait for php (otherwise nginx crashes) :(
        - "until ping -c5 php &>/dev/null; do :; done"

    varnish:
      $ref: /service/varnish/4
      roles:
        - main
      config:
        vcl:
          from: assets/varnish.vcl
      logging:
        stdout: true
        stderr: true

    db:
      $ref: /service/mysql/5.6
      driver:
        config:
          database: magento2
          password: magento2
      logging:
        stdout: true
        stderr: true

    redis:
      $ref: /service/redis/4.0

    rabbitmq:
      $ref: /service/rabbitmq/3.6
      logging:
        stdout: true
        stderr: true

    mail:
      roles:
        # for php service:
        - mail
      $ref: /service/mailhog/latest

  commands:
    php:
      $ref: /command/php/from-service
    magerun:
      $ref: /command/php/from-service
      command: magerun2
      additional_volumes:
        env_php:
          host: "{{ parent().services.php.config('env_php') }}"
          container: "{{ parent().services.php.get_working_directory() }}/app/etc/env.php"
        config:
          host: "~/.n98-magerun2"
          container: "{{ home_path() }}/.n98-magerun2"
          mode: "ro"
    n98-magerun:
      aliases: magerun
    n98-magerun2:
      aliases: magerun
    magerun2:
      aliases: magerun
    mysql:
      $ref: /command/mysql/from-service-db
    magento:
      $ref: /command/php/from-service
      command: "{{ parent().services.php.get_working_directory() }}/bin/magento"
      additional_volumes:
        env_php:
          host: "{{ parent().services.php.config('env_php') }}"
          container: "{{ parent().services.php.get_working_directory() }}/app/etc/env.php"
    composer:
      $ref: /command/composer/with-host-links
